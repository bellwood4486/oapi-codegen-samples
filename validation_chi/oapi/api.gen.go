// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/pkg/errors"
)

// Defines values for NewPostTestEnum.
const (
	NewPostTestEnumBird NewPostTestEnum = "bird"

	NewPostTestEnumCat NewPostTestEnum = "cat"

	NewPostTestEnumDog NewPostTestEnum = "dog"
)

// Error defines model for Error.
type Error struct {

	// Error code
	Code int `json:"code"`

	// Error message
	Message string `json:"message"`
}

// NewPost defines model for NewPost.
type NewPost struct {
	Content                *string              `json:"content,omitempty"`
	TestEnum               *NewPostTestEnum     `json:"test_enum,omitempty"`
	TestExclusiveMaximum   *int                 `json:"test_exclusive_maximum,omitempty"`
	TestExclusiveMinimum   *int                 `json:"test_exclusive_minimum,omitempty"`
	TestFormatByte         *[]byte              `json:"test_format_byte,omitempty"`
	TestFormatDate         *openapi_types.Date  `json:"test_format_date,omitempty"`
	TestFormatDatetime     *time.Time           `json:"test_format_datetime,omitempty"`
	TestFormatEmail        *openapi_types.Email `json:"test_format_email,omitempty"`
	TestMaxItems           *[]int               `json:"test_max_items,omitempty"`
	TestMaxLength          *string              `json:"test_max_length,omitempty"`
	TestMaximum            *int                 `json:"test_maximum,omitempty"`
	TestMinItems           *[]int               `json:"test_min_items,omitempty"`
	TestMinLength          *string              `json:"test_min_length,omitempty"`
	TestMinimum            *int                 `json:"test_minimum,omitempty"`
	TestMultipleOf         *int                 `json:"test_multiple_of,omitempty"`
	TestMultipleOfDecimals *float32             `json:"test_multiple_of_decimals,omitempty"`
	TestPattern            *string              `json:"test_pattern,omitempty"`
	TestUniqueItems        *[]int               `json:"test_unique_items,omitempty"`
	Title                  *string              `json:"title,omitempty"`
	AdditionalProperties   map[string]string    `json:"-"`
}

// NewPostTestEnum defines model for NewPost.TestEnum.
type NewPostTestEnum string

// Post defines model for Post.
type Post struct {
	// Embedded fields due to inline allOf schema
	Id int `json:"id"`
	// Embedded struct due to allOf(#/components/schemas/NewPost)
	NewPost `yaml:",inline"`
}

// AddPostJSONBody defines parameters for AddPost.
type AddPostJSONBody NewPost

// AddPostJSONRequestBody defines body for AddPost for application/json ContentType.
type AddPostJSONRequestBody AddPostJSONBody

// Getter for additional properties for NewPost. Returns the specified
// element and whether it was found
func (a NewPost) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NewPost
func (a *NewPost) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NewPost to handle AdditionalProperties
func (a *NewPost) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["content"]; found {
		err = json.Unmarshal(raw, &a.Content)
		if err != nil {
			return errors.Wrap(err, "error reading 'content'")
		}
		delete(object, "content")
	}

	if raw, found := object["test_enum"]; found {
		err = json.Unmarshal(raw, &a.TestEnum)
		if err != nil {
			return errors.Wrap(err, "error reading 'test_enum'")
		}
		delete(object, "test_enum")
	}

	if raw, found := object["test_exclusive_maximum"]; found {
		err = json.Unmarshal(raw, &a.TestExclusiveMaximum)
		if err != nil {
			return errors.Wrap(err, "error reading 'test_exclusive_maximum'")
		}
		delete(object, "test_exclusive_maximum")
	}

	if raw, found := object["test_exclusive_minimum"]; found {
		err = json.Unmarshal(raw, &a.TestExclusiveMinimum)
		if err != nil {
			return errors.Wrap(err, "error reading 'test_exclusive_minimum'")
		}
		delete(object, "test_exclusive_minimum")
	}

	if raw, found := object["test_format_byte"]; found {
		err = json.Unmarshal(raw, &a.TestFormatByte)
		if err != nil {
			return errors.Wrap(err, "error reading 'test_format_byte'")
		}
		delete(object, "test_format_byte")
	}

	if raw, found := object["test_format_date"]; found {
		err = json.Unmarshal(raw, &a.TestFormatDate)
		if err != nil {
			return errors.Wrap(err, "error reading 'test_format_date'")
		}
		delete(object, "test_format_date")
	}

	if raw, found := object["test_format_datetime"]; found {
		err = json.Unmarshal(raw, &a.TestFormatDatetime)
		if err != nil {
			return errors.Wrap(err, "error reading 'test_format_datetime'")
		}
		delete(object, "test_format_datetime")
	}

	if raw, found := object["test_format_email"]; found {
		err = json.Unmarshal(raw, &a.TestFormatEmail)
		if err != nil {
			return errors.Wrap(err, "error reading 'test_format_email'")
		}
		delete(object, "test_format_email")
	}

	if raw, found := object["test_max_items"]; found {
		err = json.Unmarshal(raw, &a.TestMaxItems)
		if err != nil {
			return errors.Wrap(err, "error reading 'test_max_items'")
		}
		delete(object, "test_max_items")
	}

	if raw, found := object["test_max_length"]; found {
		err = json.Unmarshal(raw, &a.TestMaxLength)
		if err != nil {
			return errors.Wrap(err, "error reading 'test_max_length'")
		}
		delete(object, "test_max_length")
	}

	if raw, found := object["test_maximum"]; found {
		err = json.Unmarshal(raw, &a.TestMaximum)
		if err != nil {
			return errors.Wrap(err, "error reading 'test_maximum'")
		}
		delete(object, "test_maximum")
	}

	if raw, found := object["test_min_items"]; found {
		err = json.Unmarshal(raw, &a.TestMinItems)
		if err != nil {
			return errors.Wrap(err, "error reading 'test_min_items'")
		}
		delete(object, "test_min_items")
	}

	if raw, found := object["test_min_length"]; found {
		err = json.Unmarshal(raw, &a.TestMinLength)
		if err != nil {
			return errors.Wrap(err, "error reading 'test_min_length'")
		}
		delete(object, "test_min_length")
	}

	if raw, found := object["test_minimum"]; found {
		err = json.Unmarshal(raw, &a.TestMinimum)
		if err != nil {
			return errors.Wrap(err, "error reading 'test_minimum'")
		}
		delete(object, "test_minimum")
	}

	if raw, found := object["test_multiple_of"]; found {
		err = json.Unmarshal(raw, &a.TestMultipleOf)
		if err != nil {
			return errors.Wrap(err, "error reading 'test_multiple_of'")
		}
		delete(object, "test_multiple_of")
	}

	if raw, found := object["test_multiple_of_decimals"]; found {
		err = json.Unmarshal(raw, &a.TestMultipleOfDecimals)
		if err != nil {
			return errors.Wrap(err, "error reading 'test_multiple_of_decimals'")
		}
		delete(object, "test_multiple_of_decimals")
	}

	if raw, found := object["test_pattern"]; found {
		err = json.Unmarshal(raw, &a.TestPattern)
		if err != nil {
			return errors.Wrap(err, "error reading 'test_pattern'")
		}
		delete(object, "test_pattern")
	}

	if raw, found := object["test_unique_items"]; found {
		err = json.Unmarshal(raw, &a.TestUniqueItems)
		if err != nil {
			return errors.Wrap(err, "error reading 'test_unique_items'")
		}
		delete(object, "test_unique_items")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return errors.Wrap(err, "error reading 'title'")
		}
		delete(object, "title")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NewPost to handle AdditionalProperties
func (a NewPost) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Content != nil {
		object["content"], err = json.Marshal(a.Content)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'content'"))
		}
	}

	if a.TestEnum != nil {
		object["test_enum"], err = json.Marshal(a.TestEnum)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'test_enum'"))
		}
	}

	if a.TestExclusiveMaximum != nil {
		object["test_exclusive_maximum"], err = json.Marshal(a.TestExclusiveMaximum)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'test_exclusive_maximum'"))
		}
	}

	if a.TestExclusiveMinimum != nil {
		object["test_exclusive_minimum"], err = json.Marshal(a.TestExclusiveMinimum)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'test_exclusive_minimum'"))
		}
	}

	if a.TestFormatByte != nil {
		object["test_format_byte"], err = json.Marshal(a.TestFormatByte)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'test_format_byte'"))
		}
	}

	if a.TestFormatDate != nil {
		object["test_format_date"], err = json.Marshal(a.TestFormatDate)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'test_format_date'"))
		}
	}

	if a.TestFormatDatetime != nil {
		object["test_format_datetime"], err = json.Marshal(a.TestFormatDatetime)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'test_format_datetime'"))
		}
	}

	if a.TestFormatEmail != nil {
		object["test_format_email"], err = json.Marshal(a.TestFormatEmail)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'test_format_email'"))
		}
	}

	if a.TestMaxItems != nil {
		object["test_max_items"], err = json.Marshal(a.TestMaxItems)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'test_max_items'"))
		}
	}

	if a.TestMaxLength != nil {
		object["test_max_length"], err = json.Marshal(a.TestMaxLength)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'test_max_length'"))
		}
	}

	if a.TestMaximum != nil {
		object["test_maximum"], err = json.Marshal(a.TestMaximum)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'test_maximum'"))
		}
	}

	if a.TestMinItems != nil {
		object["test_min_items"], err = json.Marshal(a.TestMinItems)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'test_min_items'"))
		}
	}

	if a.TestMinLength != nil {
		object["test_min_length"], err = json.Marshal(a.TestMinLength)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'test_min_length'"))
		}
	}

	if a.TestMinimum != nil {
		object["test_minimum"], err = json.Marshal(a.TestMinimum)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'test_minimum'"))
		}
	}

	if a.TestMultipleOf != nil {
		object["test_multiple_of"], err = json.Marshal(a.TestMultipleOf)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'test_multiple_of'"))
		}
	}

	if a.TestMultipleOfDecimals != nil {
		object["test_multiple_of_decimals"], err = json.Marshal(a.TestMultipleOfDecimals)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'test_multiple_of_decimals'"))
		}
	}

	if a.TestPattern != nil {
		object["test_pattern"], err = json.Marshal(a.TestPattern)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'test_pattern'"))
		}
	}

	if a.TestUniqueItems != nil {
		object["test_unique_items"], err = json.Marshal(a.TestUniqueItems)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'test_unique_items'"))
		}
	}

	if a.Title != nil {
		object["title"], err = json.Marshal(a.Title)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'title'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return all posts
	// (GET /posts)
	FindPosts(w http.ResponseWriter, r *http.Request)
	// Create a new post
	// (POST /posts)
	AddPost(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// FindPosts operation middleware
func (siw *ServerInterfaceWrapper) FindPosts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindPosts(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AddPost operation middleware
func (siw *ServerInterfaceWrapper) AddPost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddPost(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/posts", wrapper.FindPosts)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/posts", wrapper.AddPost)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xW227jNhD9FWHatyq2kiJFoadmixYI0IvRfWuQGow4trngbclR1m7gfy94kWxJVusC",
	"ebI45DkznMuh36AxyhqNmjzUb+CbHSoWP39yzrjwYZ2x6EhgNDeGY/jl6BsnLAmjoU6Hi7hXAh0sQg1C",
	"E27RwbEEhd6z7Syu2+6hnpzQWzgeS3D4uRUOOdRPkPm748/HEn7DLyvjKTAzzkWgZXI1iHjEWU4upAk1",
	"XTxJ6GmNulVhN/0+ATdbKKFhBCW8CMfhuZxD7hvZevGKa8X2QmWazvhrZyPXYgn9kduqupTDMaPQU8bO",
	"lhm75e084cY4xWj9cqBYnbSEGqJh7l4ZxNkIFA1XgEioKfAmWv8DjYoJOYAmyxxMsf1aEKpY6f7jQoOy",
	"/WPave+pmHPsMGCSqLe0CwyK7X/Ji7PkTp13JbqquEro64IVOgd7Nxes0OfBCt0Fez8b66mdrmkb1UoS",
	"VuLabCIkL3/fQH13/901sDXHRigm/RhfLU630q16OYNbRoROR1HqPuGvp4ebP9nN38/fzHZBq8XnFq/K",
	"7SCdJSRkznaYqnBEkMQLcnHa6lWp5zMvn7Ch4KBXKynDbZ/G+ir4pcBGQijORafnfoOvHW6ghq+WJ1Vf",
	"ZklfdjEdn09xJkNgF3pjOjVkTYwwzxp4pqzEH3AffxeNUVCCZmGE4WO0FQ8t7YwL+XIBsSOy9XIpTcPk",
	"LrooR7r/UPiMXD0WG+OKDzKqahdY5g3W4iO6V9EEaXhF5xP+dlEtqkBrLGpmBdTwbTSVoTN2MZNLa3x6",
	"1bZI06dnARHtWFg/cqjhZ6H5KmJCtr012qea3FXV6KVg1krRROjykzf69HYO+uvf6rHKiRkO8HGSqkWs",
	"vm+VYu4ANfyB1DpdMCkLm4MltvWhLcI6voo2N9mQ6UeHjNAXrND4JYKnOXjgPHdu6Df09MHww/+6/FU9",
	"OGzoPFijnN++m9uTz2FCQgqKzmtq0g1rJb2b4/Qf6oLnVuPeYkPIC8xnzmucKnVWqGmRIwBdGImoIpcn",
	"r/6+qqo08gn+1k2uTVpw/CcAAP//niTNEQIKAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}

