// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapi

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/pkg/errors"
)

// Error defines model for Error.
type Error struct {

	// Error code
	Code int `json:"code"`

	// Error message
	Message string `json:"message"`
}

// NewPost defines model for NewPost.
type NewPost struct {
	Content              *string           `json:"content,omitempty"`
	Title                string            `json:"title"`
	AdditionalProperties map[string]string `json:"-"`
}

// Post defines model for Post.
type Post struct {
	// Embedded fields due to inline allOf schema
	Id int `json:"id"`
	// Embedded struct due to allOf(#/components/schemas/NewPost)
	NewPost `yaml:",inline"`
}

// AddPostJSONBody defines parameters for AddPost.
type AddPostJSONBody NewPost

// AddPostJSONRequestBody defines body for AddPost for application/json ContentType.
type AddPostJSONRequestBody AddPostJSONBody

// Getter for additional properties for NewPost. Returns the specified
// element and whether it was found
func (a NewPost) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for NewPost
func (a *NewPost) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for NewPost to handle AdditionalProperties
func (a *NewPost) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["content"]; found {
		err = json.Unmarshal(raw, &a.Content)
		if err != nil {
			return errors.Wrap(err, "error reading 'content'")
		}
		delete(object, "content")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return errors.Wrap(err, "error reading 'title'")
		}
		delete(object, "title")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for NewPost to handle AdditionalProperties
func (a NewPost) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Content != nil {
		object["content"], err = json.Marshal(a.Content)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'content'"))
		}
	}

	object["title"], err = json.Marshal(a.Title)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'title'"))
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return all posts
	// (GET /posts)
	FindPosts(w http.ResponseWriter, r *http.Request)
	// Create a new post
	// (POST /posts)
	AddPost(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// FindPosts operation middleware
func (siw *ServerInterfaceWrapper) FindPosts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindPosts(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AddPost operation middleware
func (siw *ServerInterfaceWrapper) AddPost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddPost(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/posts", wrapper.FindPosts)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/posts", wrapper.AddPost)
	})

	return r
}

